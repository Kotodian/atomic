// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: atomic/atomic_proto/blog/blog.proto

package blog

import (
	_ "atomic/atomic_proto/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for BlogService service

type BlogService interface {
	// 创建
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error)
	// 删除
	Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error)
}

type blogService struct {
	c    client.Client
	name string
}

func NewBlogService(name string, c client.Client) BlogService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "blog"
	}
	return &blogService{
		c:    c,
		name: name,
	}
}

func (c *blogService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "BlogService.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogService) Delete(ctx context.Context, in *DeleteRequest, opts ...client.CallOption) (*DeleteResponse, error) {
	req := c.c.NewRequest(c.name, "BlogService.Delete", in)
	out := new(DeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlogService service

type BlogServiceHandler interface {
	// 创建
	Create(context.Context, *CreateRequest, *CreateResponse) error
	// 删除
	Delete(context.Context, *DeleteRequest, *DeleteResponse) error
}

func RegisterBlogServiceHandler(s server.Server, hdlr BlogServiceHandler, opts ...server.HandlerOption) error {
	type blogService interface {
		Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error
		Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error
	}
	type BlogService struct {
		blogService
	}
	h := &blogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&BlogService{h}, opts...))
}

type blogServiceHandler struct {
	BlogServiceHandler
}

func (h *blogServiceHandler) Create(ctx context.Context, in *CreateRequest, out *CreateResponse) error {
	return h.BlogServiceHandler.Create(ctx, in, out)
}

func (h *blogServiceHandler) Delete(ctx context.Context, in *DeleteRequest, out *DeleteResponse) error {
	return h.BlogServiceHandler.Delete(ctx, in, out)
}
